import os
import sys
import logging
from pathlib import Path
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import traceback
from datetime import datetime
import pandas as pd
from typing import List, Dict, Any, Optional

# Add current directory to path
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.append(current_dir)

# Import modules
from core import processor
from utils import config_manager
from utils.config_manager import get_downloads_folder
import tempfile
import shutil

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('teacher_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def ensure_temp_dir(prefix: str = "") -> str:
    """–°—Ç–≤–æ—Ä—é—î —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É"""
    try:
        project_dir = os.path.dirname(__file__)
        temp_dir = os.path.join(project_dir, "temp")
        os.makedirs(temp_dir, exist_ok=True)
        
        if prefix:
            temp_subdir = os.path.join(temp_dir, f"{prefix}{datetime.now().strftime('%Y%m%d_%H%M%S')}")
            os.makedirs(temp_subdir, exist_ok=True)
            return temp_subdir
        
        return temp_dir
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É: {e}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—É —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É.")
        return tempfile.gettempdir()

def cleanup_temp_files():
    """–û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É"""
    try:
        project_dir = os.path.dirname(__file__)
        temp_dir = os.path.join(project_dir, "temp")
        
        if os.path.exists(temp_dir):
            import time
            for filename in os.listdir(temp_dir):
                file_path = os.path.join(temp_dir, filename)
                try:
                    if os.path.isfile(file_path):
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–∫ —Ñ–∞–π–ª—É (–≤–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ä—à—ñ 1 –¥–Ω—è)
                        file_age = time.time() - os.path.getmtime(file_path)
                        if file_age > 86400:  # 24 –≥–æ–¥–∏–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                            os.remove(file_path)
                            logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {filename}")
                except Exception as e:
                    logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {filename}: {e}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cleanup_temp_files()

class TeacherTestApp:
    def __init__(self, root):
        self.root = root
        self.root.title("TeacherTest - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è —É—á–Ω—ñ–≤")
        self.root.geometry("800x700")
        
        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤
        self.excel_file_path = tk.StringVar()
        self.output_folder_path = tk.StringVar(value=ensure_temp_dir("output_"))
        self.answer_key_file_path = tk.StringVar()
        
        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        self.num_variants = tk.IntVar(value=10)
        self.variant_number = tk.IntVar(value=1)
        self.student_answers_text = tk.StringVar()
        
        # –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ (1 - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤, 2 - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç)
        self.mode = tk.IntVar(value=1)
        
        self.setup_ui()
        
    def setup_ui(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ì–æ–ª–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ç—è–≥—É–≤–∞–Ω–Ω—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="TeacherTest - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç—ñ–≤", font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏
        mode_frame = ttk.LabelFrame(main_frame, text="–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏", padding="10")
        mode_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Radiobutton(mode_frame, text="–†–µ–∂–∏–º 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤", variable=self.mode, value=1, command=self.on_mode_change).grid(row=0, column=0, sticky=tk.W)
        ttk.Radiobutton(mode_frame, text="–†–µ–∂–∏–º 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç", variable=self.mode, value=2, command=self.on_mode_change).grid(row=0, column=1, sticky=tk.W)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–∂–∏–º—É 1 (–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤)
        self.mode1_frame = ttk.LabelFrame(main_frame, text="–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤", padding="10")
        self.mode1_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        self.mode1_frame.columnconfigure(1, weight=1)
        
        # –í–∏–±—ñ—Ä Excel —Ñ–∞–π–ª—É –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏
        ttk.Label(self.mode1_frame, text="Excel —Ñ–∞–π–ª –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Entry(self.mode1_frame, textvariable=self.excel_file_path, width=50).grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(5, 5), pady=2)
        ttk.Button(self.mode1_frame, text="–û–≥–ª—è–¥", command=self.browse_excel_file).grid(row=0, column=2, pady=2)
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
        ttk.Label(self.mode1_frame, text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Spinbox(self.mode1_frame, from_=1, to=100, textvariable=self.num_variants, width=10).grid(row=1, column=1, sticky=tk.W, padx=(5, 0), pady=2)
        
        # –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        ttk.Label(self.mode1_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:").grid(row=2, column=0, sticky=tk.W, pady=2)
        ttk.Entry(self.mode1_frame, textvariable=self.output_folder_path, width=50).grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(5, 5), pady=2)
        ttk.Button(self.mode1_frame, text="–û–≥–ª—è–¥", command=self.browse_output_folder).grid(row=2, column=2, pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        ttk.Button(self.mode1_frame, text="–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–∏", command=self.generate_tests).grid(row=3, column=0, columnspan=3, pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–∂–∏–º—É 2 (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç)
        self.mode2_frame = ttk.LabelFrame(main_frame, text="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç", padding="10")
        self.mode2_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        self.mode2_frame.columnconfigure(1, weight=1)
        
        # –§–∞–π–ª-–∫–ª—é—á –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏
        ttk.Label(self.mode2_frame, text="Excel —Ñ–∞–π–ª-–∫–ª—é—á:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Entry(self.mode2_frame, textvariable=self.answer_key_file_path, width=50).grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(5, 5), pady=2)
        ttk.Button(self.mode2_frame, text="–û–≥–ª—è–¥", command=self.browse_answer_key_file).grid(row=0, column=2, pady=2)
        
        # –ù–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É —É—á–Ω—è
        ttk.Label(self.mode2_frame, text="–ù–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É —É—á–Ω—è:").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Spinbox(self.mode2_frame, from_=1, to=100, textvariable=self.variant_number, width=10).grid(row=1, column=1, sticky=tk.W, padx=(5, 0), pady=2)
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—á–Ω—è
        ttk.Label(self.mode2_frame, text="–í—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—á–Ω—è (—á–µ—Ä–µ–∑ –∫–æ–º—É):").grid(row=2, column=0, sticky=tk.W, pady=2)
        answers_entry = ttk.Entry(self.mode2_frame, textvariable=self.student_answers_text, width=50)
        answers_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(5, 5), pady=2)
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É
        help_label = ttk.Label(self.mode2_frame, text="üí° –î–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö: –Ω–æ–º–µ—Ä–∏ –≤—ñ–¥ 1 –¥–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤. –î–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö: —Ç–µ–∫—Å—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ", 
                              font=('TkDefaultFont', 8), foreground='gray')
        help_label.grid(row=2, column=2, sticky=tk.W, padx=(5, 0), pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        ttk.Button(self.mode2_frame, text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–æ–±–æ—Ç—É", command=self.check_answers).grid(row=3, column=0, columnspan=3, pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(main_frame, variable=self.progress_var, maximum=100)
        self.progress_bar.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 5))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        self.status_label = ttk.Label(main_frame, textvariable=self.status_var)
        self.status_label.grid(row=5, column=0, columnspan=3, pady=5)
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(main_frame, text="–ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü—ñ–π", padding="5")
        log_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(6, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=10, width=80)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∂–∏–º 1
        self.on_mode_change()
        
    def on_mode_change(self):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏"""
        if self.mode.get() == 1:
            self.mode1_frame.grid()
            self.mode2_frame.grid_remove()
        else:
            self.mode1_frame.grid_remove()
            self.mode2_frame.grid()
    
    def browse_excel_file(self):
        """–í–∏–±—ñ—Ä Excel —Ñ–∞–π–ª—É –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏"""
        filename = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å Excel —Ñ–∞–π–ª –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        if filename:
            self.excel_file_path.set(filename)
    
    def browse_answer_key_file(self):
        """–í–∏–±—ñ—Ä Excel —Ñ–∞–π–ª—É-–∫–ª—é—á–∞"""
        filename = filedialog.askopenfilename(
            title="–í–∏–±–µ—Ä—ñ—Ç—å Excel —Ñ–∞–π–ª-–∫–ª—é—á",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        if filename:
            self.answer_key_file_path.set(filename)
    
    def browse_output_folder(self):
        """–í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
        folder = filedialog.askdirectory(title="–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
        if folder:
            self.output_folder_path.set(folder)
    
    def log_message(self, message):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∂—É—Ä–Ω–∞–ª"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def update_progress(self, current, total, extra_info=""):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É"""
        if total > 0:
            progress = (current / total) * 100
            self.progress_var.set(progress)
            status_text = f"–ü—Ä–æ–≥—Ä–µ—Å: {current}/{total}"
            if extra_info:
                status_text += f" - {extra_info}"
            self.status_var.set(status_text)
        self.root.update_idletasks()
    
    def generate_tests(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if not self.excel_file_path.get():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å Excel —Ñ–∞–π–ª –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏")
            return
        
        if not os.path.exists(self.excel_file_path.get()):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±—Ä–∞–Ω–∏–π Excel —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î")
            return
        
        if not self.output_folder_path.get():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
            return
        
        if self.num_variants.get() < 1:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
            return
        
        # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=self._generate_tests_thread)
        thread.daemon = True
        thread.start()
    
    def _generate_tests_thread(self):
        """–ü–æ—Ç—ñ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤"""
        try:
            self.log_message("–ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤...")
            self.status_var.set("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤...")
            
            # –ß–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É
            self.log_message(f"–ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {self.excel_file_path.get()}")
            df = processor.read_test_excel(self.excel_file_path.get())
            
            if df.empty:
                raise ValueError("Excel —Ñ–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö")
            
            self.log_message(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(df)} –ø–∏—Ç–∞–Ω—å")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
            self.log_message(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {self.num_variants.get()} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤...")
            variants = processor.generate_test_variants(df, self.num_variants.get())
            
            # PDF —Ñ–∞–π–ª–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ Word —Ç–∞ Excel
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É-–∫–ª—é—á–∞
            self.log_message("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É-–∫–ª—é—á–∞...")
            input_file_name = os.path.splitext(os.path.basename(self.excel_file_path.get()))[0]
            excel_key_path = processor.create_excel_answer_key(variants, self.output_folder_path.get(), input_file_name)
            
            self.log_message(f"–ì–æ—Ç–æ–≤–æ! –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:")
            self.log_message(f"- Excel –∫–ª—é—á: {excel_key_path}")
            
            self.status_var.set("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            self.progress_var.set(100)
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            self.root.after(0, lambda: messagebox.showinfo(
                "–£—Å–ø—ñ—Ö", 
                f"–¢–µ—Å—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!\n\n"
                f"–§–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {self.output_folder_path.get()}"
            ))
            
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤: {str(e)}"
            self.log_message(error_msg)
            logger.error(error_msg, exc_info=True)
            self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
            self.root.after(0, lambda: messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error_msg))
    
    def check_answers(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É—á–Ω—è"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if not self.answer_key_file_path.get():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å Excel —Ñ–∞–π–ª-–∫–ª—é—á")
            return
        
        if not os.path.exists(self.answer_key_file_path.get()):
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–∏–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª-–∫–ª—é—á –Ω–µ —ñ—Å–Ω—É—î")
            return
        
        if self.variant_number.get() < 1:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0")
            return
        
        if not self.student_answers_text.get().strip():
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—á–Ω—è")
            return
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=self._check_answers_thread)
        thread.daemon = True
        thread.start()
    
    def _check_answers_thread(self):
        """–ü–æ—Ç—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"""
        try:
            self.log_message("–ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π...")
            self.status_var.set("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π...")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É—á–Ω—è
            answers_text = self.student_answers_text.get().strip()
            try:
                student_answers = [x.strip() for x in answers_text.split(',') if x.strip()]
            except ValueError:
                raise ValueError("–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏")
            
            self.log_message(f"–í—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—á–Ω—è: {student_answers}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            check_result = processor.check_student_answers(
                self.answer_key_file_path.get(),
                self.variant_number.get(),
                student_answers
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—ñ—Ç–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            self.log_message("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤...")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ PDF –∑–≤—ñ—Ç
            pdf_report_path = processor.create_check_result_pdf(check_result, self.output_folder_path.get())
            self.log_message(f"PDF –∑–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {pdf_report_path}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ Word –∑–≤—ñ—Ç
            word_report_path = processor.create_check_result_word(check_result, self.output_folder_path.get())
            self.log_message(f"Word –∑–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {word_report_path}")
            
            # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            weighted_score = check_result.get('weighted_score', 0)
            max_score = check_result.get('max_score', 12)
            self.log_message(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:")
            self.log_message(f"- –í–∞—Ä—ñ–∞–Ω—Ç: {check_result['variant_number']}")
            self.log_message(f"- –í—Å—å–æ–≥–æ –ø–∏—Ç–∞–Ω—å: {check_result['total_questions']}")
            self.log_message(f"- –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {check_result['correct_answers']}")
            self.log_message(f"- –í—ñ–¥—Å–æ—Ç–æ–∫: {check_result['score_percentage']:.1f}%")
            self.log_message(f"- –ë–∞–ª–∏: {weighted_score:.2f} –∑ {max_score}")
            
            self.status_var.set("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = (
                f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–í–∞—Ä—ñ–∞–Ω—Ç: {check_result['variant_number']}\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {check_result['correct_answers']} –∑ {check_result['total_questions']}\n"
                f"–í—ñ–¥—Å–æ—Ç–æ–∫: {check_result['score_percentage']:.1f}%\n"
                f"–ë–∞–ª–∏: {weighted_score:.2f} –∑ {max_score}\n\n"
                f"–°—Ç–≤–æ—Ä–µ–Ω–æ –∑–≤—ñ—Ç–∏:\n"
                f"- PDF: {os.path.basename(pdf_report_path)}\n"
                f"- Word: {os.path.basename(word_report_path)}"
            )
            
            self.root.after(0, lambda: messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏", result_text))
            
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {str(e)}"
            self.log_message(error_msg)
            logger.error(error_msg, exc_info=True)
            self.status_var.set("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
            self.root.after(0, lambda: messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error_msg))

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É"""
    try:
        root = tk.Tk()
        app = TeacherTestApp(root)
        root.mainloop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞—Ç–∫—É: {e}", exc_info=True)
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞", f"–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()