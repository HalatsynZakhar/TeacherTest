import streamlit as st
import os
import sys
import logging
import io
import time
import tempfile
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple
import pandas as pd
from openpyxl.utils import get_column_letter
from openpyxl import load_workbook
import json
import traceback
# from fpdf import FPDF  # –û—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Word –∏ Excel

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from utils import config_manager
from utils import excel_utils
from utils.config_manager import get_downloads_folder, ConfigManager
from core.processor import (
    read_test_excel, 
    generate_test_variants, 
    create_excel_answer_key,
    check_student_answers,
    create_check_result_pdf,
    create_check_result_word,
    create_test_word,
    read_test_word,
    export_answers_to_word,
    generate_test_template,
    generate_neural_query_document
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'logs')
os.makedirs(log_dir, exist_ok=True)

# –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—ñ–≤ –¥–æ 5 –æ—Å—Ç–∞–Ω–Ω—ñ—Ö
log_files = sorted([f for f in os.listdir(log_dir) if f.startswith('teacher_test_')])
if len(log_files) > 5:
    for old_log in log_files[:-5]:
        try:
            os.remove(os.path.join(log_dir, old_log))
        except:
            pass

# –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ª–æ–≥-—Ñ–∞–π–ª
log_file = os.path.join(log_dir, 'teacher_test_latest.log')
try:
    with open(log_file, 'w', encoding='utf-8') as f:
        f.write(f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")} - INFO - teacher_test - New log file created with UTF-8 encoding\n')
except Exception as e:
    print(f"Error creating log file: {e}")

log_stream = io.StringIO()
log_handler = logging.StreamHandler(log_stream)
log_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s'))
log_handler.setLevel(logging.INFO)

file_handler = logging.FileHandler(log_file, encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s'))
file_handler.setLevel(logging.DEBUG)

root_logger = logging.getLogger()
root_logger.setLevel(logging.DEBUG)
for handler in root_logger.handlers[:]:
    root_logger.removeHandler(handler)
root_logger.addHandler(log_handler)
root_logger.addHandler(file_handler)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

log = logging.getLogger(__name__)

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è TeacherTest
default_settings = {
    "test_settings": {
        "default_variants_count": 10,
        "shuffle_questions": True,
        "shuffle_answers": True
    },
    "file_settings": {
        "max_size_mb": 50
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def init_config_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if 'config_manager' not in st.session_state:
        presets_folder = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'settings_presets')
        config_manager_instance = config_manager.ConfigManager(presets_folder)
        config_manager_instance.load_settings()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è TeacherTest
        if not config_manager_instance.get_setting('test_settings.default_variants_count'):
            config_manager_instance.set_setting('test_settings.default_variants_count', default_settings['test_settings']['default_variants_count'])
        
        if config_manager_instance.get_setting('test_settings.shuffle_questions') is None:
            config_manager_instance.set_setting('test_settings.shuffle_questions', default_settings['test_settings']['shuffle_questions'])
        
        if config_manager_instance.get_setting('test_settings.shuffle_answers') is None:
            config_manager_instance.set_setting('test_settings.shuffle_answers', default_settings['test_settings']['shuffle_answers'])
        
        if not config_manager_instance.get_setting('file_settings.max_size_mb'):
            config_manager_instance.set_setting('file_settings.max_size_mb', default_settings['file_settings']['max_size_mb'])
        
        config_manager_instance.save_settings()
        st.session_state.config_manager = config_manager_instance
        log.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó TeacherTest —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    return st.session_state.config_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
config_folder = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'settings_presets')
config_manager.init_config_manager(config_folder)
init_config_manager()
cm = st.session_state.config_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(
    page_title="TeacherTest - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç—ñ–≤",
    page_icon="üìù",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
def ensure_temp_dir(prefix: str = "") -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    project_dir = os.path.dirname(os.path.dirname(__file__))
    temp_dir = os.path.join(project_dir, "temp")
    
    try:
        os.makedirs(temp_dir, exist_ok=True)
        log.info(f"–°—Ç–≤–æ—Ä–µ–Ω–∞/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ —Ç–∏–º—á–∞—Å–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {temp_dir}")
    except Exception as e:
        log.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó {temp_dir}: {e}")
        temp_dir = os.path.join(tempfile.gettempdir(), f"{prefix}teachertest")
        try:
            os.makedirs(temp_dir, exist_ok=True)
        except Exception as e2:
            log.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–∏—Å—Ç–µ–º–Ω–æ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {e2}")
            raise e2
    
    return temp_dir

# –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
def cleanup_temp_files():
    """–û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫–∞"""
    try:
        project_dir = os.path.dirname(os.path.dirname(__file__))
        temp_dir = os.path.join(project_dir, "temp")
        
        if os.path.exists(temp_dir):
            for filename in os.listdir(temp_dir):
                file_path = os.path.join(temp_dir, filename)
                try:
                    if os.path.isfile(file_path):
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–∫ —Ñ–∞–π–ª–∞ (–≤–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
                        file_age = time.time() - os.path.getmtime(file_path)
                        if file_age > 86400:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                            os.remove(file_path)
                            log.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {filename}")
                except Exception as e:
                    log.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {filename}: {e}")
    except Exception as e:
        log.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cleanup_temp_files()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'log_messages' not in st.session_state:
    st.session_state.log_messages = []
if 'df' not in st.session_state:
    st.session_state.df = None
if 'temp_file_path' not in st.session_state:
    st.session_state.temp_file_path = None
if 'processing_error' not in st.session_state:
    st.session_state.processing_error = None
if 'output_files' not in st.session_state:
    st.session_state.output_files = {}
if 'mode' not in st.session_state:
    st.session_state.mode = 1  # 1 - –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤, 2 - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç
if 'variants_count' not in st.session_state:
    st.session_state.variants_count = cm.get_setting('test_settings.default_variants_count', 10)
if 'answer_key_file' not in st.session_state:
    st.session_state.answer_key_file = None
if 'variant_number' not in st.session_state:
    st.session_state.variant_number = 1
if 'student_answers' not in st.session_state:
    st.session_state.student_answers = ""
if 'answer_format' not in st.session_state:
    st.session_state.answer_format = 'list'  # 'list' –∏–ª–∏ 'table'
if 'space_optimization' not in st.session_state:
    st.session_state.space_optimization = False  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ—Å—Ç–∞
if 'student_class' not in st.session_state:
    st.session_state.student_class = ""
if 'student_full_name' not in st.session_state:
    st.session_state.student_full_name = ""
if 'input_file_name' not in st.session_state:
    st.session_state.input_file_name = ""
if 'test_class' not in st.session_state:
    st.session_state.test_class = ""
if 'test_date' not in st.session_state:
    st.session_state.test_date = ""
if 'question_shuffle_mode' not in st.session_state:
    st.session_state.question_shuffle_mode = 'full'  # 'full', 'easy_to_hard', 'none'
if 'answer_shuffle_mode' not in st.session_state:
    st.session_state.answer_shuffle_mode = 'random'  # 'random', 'none'
if 'last_error' not in st.session_state:
    st.session_state.last_error = None

def add_log_message(message, level="INFO"):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_entry = f"[{timestamp}] {level}: {message}"
    
    if 'log_messages' not in st.session_state:
        st.session_state.log_messages = []
    
    st.session_state.log_messages.append(log_entry)
    
    # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –ª–æ–∑—ñ
    if len(st.session_state.log_messages) > 100:
        st.session_state.log_messages = st.session_state.log_messages[-100:]
    
    # –õ–æ–≥—É—î–º–æ —É —Ñ–∞–π–ª
    if level == "ERROR":
        log.error(message)
    elif level == "WARNING":
        log.warning(message)
    else:
        log.info(message)

def load_file(uploaded_file_arg=None):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ Excel –∞–±–æ Word —Ñ–∞–π–ª–∞ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏"""
    try:
        if uploaded_file_arg is None:
            uploaded_file_arg = st.session_state.get('temp_file_path')
        
        if not uploaded_file_arg or not os.path.exists(uploaded_file_arg):
            st.session_state.df = None
            st.session_state.processing_error = "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            return
        
        add_log_message(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞: {os.path.basename(uploaded_file_arg)}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–º–µ–Ω–∞—Ö –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        st.session_state.input_file_name = os.path.splitext(os.path.basename(uploaded_file_arg))[0]
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª–∞ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
        file_extension = os.path.splitext(uploaded_file_arg)[1].lower()
        
        if file_extension in ['.xlsx', '.xls']:
            # –ß–∏—Ç–∞—î–º–æ Excel —Ñ–∞–π–ª –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏
            df = read_test_excel(uploaded_file_arg)
        elif file_extension in ['.docx', '.doc']:
            # –ß–∏—Ç–∞—î–º–æ Word —Ñ–∞–π–ª –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏
            df = read_test_word(uploaded_file_arg)
        else:
            st.session_state.df = None
            st.session_state.processing_error = "–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Excel (.xlsx, .xls) –∞–±–æ Word (.docx, .doc)"
            add_log_message("–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞", "ERROR")
            return
        
        if df.empty:
            st.session_state.df = None
            st.session_state.processing_error = "–§–∞–π–ª –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
            add_log_message("–§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É", "ERROR")
            return
        
        st.session_state.df = df
        st.session_state.processing_error = None
        add_log_message(f"–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ó–Ω–∞–π–¥–µ–Ω–æ {len(df)} –ø–∏—Ç–∞–Ω—å", "SUCCESS")
        
    except Exception as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª–∞: {str(e)}"
        st.session_state.processing_error = error_msg
        st.session_state.df = None
        add_log_message(error_msg, "ERROR")
        log.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª–∞: {e}", exc_info=True)

def generate_tests():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤"""
    try:
        # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        st.session_state.last_error = None
        
        add_log_message("–ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤")
        
        if st.session_state.df is None or st.session_state.df.empty:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ—Å—Ç–æ–≤
        variants = generate_test_variants(
            st.session_state.df, 
            st.session_state.variants_count,
            question_shuffle_mode=st.session_state.question_shuffle_mode,
            answer_shuffle_mode=st.session_state.answer_shuffle_mode
        )
        add_log_message(f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(variants)} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ç–µ—Å—Ç—ñ–≤")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
        output_dir = ensure_temp_dir("output_")
        
        # PDF —Ñ–∞–π–ª–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ Word —Ç–∞ Excel
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª-–∫–ª—é—á
        excel_key_path = create_excel_answer_key(variants, output_dir, st.session_state.input_file_name)
        add_log_message(f"–°—Ç–≤–æ—Ä–µ–Ω–æ Excel —Ñ–∞–π–ª-–∫–ª—é—á")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Word —Ñ–∞–π–ª –∑ —Ç–µ—Å—Ç–∞–º–∏
        test_word_path = create_test_word(variants, output_dir, 1, st.session_state.input_file_name, st.session_state.answer_format, st.session_state.space_optimization, st.session_state.test_class, st.session_state.test_date)
        add_log_message(f"–°—Ç–≤–æ—Ä–µ–Ω–æ Word —Ñ–∞–π–ª –∑ —Ç–µ—Å—Ç–∞–º–∏")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Word —Ñ–∞–π–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏
        answers_word_path = export_answers_to_word(variants, output_dir, st.session_state.input_file_name)
        add_log_message(f"–°—Ç–≤–æ—Ä–µ–Ω–æ Word —Ñ–∞–π–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
        st.session_state.output_files = {
            'excel_key': excel_key_path,
            'test_word': test_word_path,
            'answers_word': answers_word_path
        }
        
        add_log_message("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ", "SUCCESS")
        return True
        
    except Exception as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤: {str(e)}"
        st.session_state.last_error = error_msg
        add_log_message(error_msg, "ERROR")
        log.error(error_msg, exc_info=True)
        return False

def check_answers():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É—á–Ω—è"""
    try:
        # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–º–∏–ª–∫–∏
        st.session_state.last_error = None
        
        add_log_message("–ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
        
        if not st.session_state.answer_key_file:
            raise ValueError("–ù–µ –æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª-–∫–ª—é—á")
        
        # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—á–Ω—è
        try:
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ –∫–æ–º–∞—Ö, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–æ—Ä–æ–∂–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            raw_answers = st.session_state.student_answers.split(',')
            student_answers = []
            
            for i, answer in enumerate(raw_answers):
                answer = answer.strip()
                if not answer:  # –ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                    student_answers.append("")
                else:
                    student_answers.append(answer)
                    
        except ValueError:
            raise ValueError("–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        check_result = check_student_answers(
            st.session_state.answer_key_file,
            st.session_state.variant_number,
            student_answers
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        student_info = {
            'class': st.session_state.student_class.strip(),
            'full_name': st.session_state.student_full_name.strip()
        }
        check_result['student_info'] = student_info
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—ñ—Ç–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        output_dir = ensure_temp_dir("reports_")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ PDF –∑–≤—ñ—Ç
        pdf_report_path = create_check_result_pdf(check_result, output_dir)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Word –∑–≤—ñ—Ç
        word_report_path = create_check_result_word(check_result, output_dir)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞ —à–ª—è—Ö–∏ –¥–æ –∑–≤—ñ—Ç—ñ–≤
        st.session_state.check_result = check_result
        st.session_state.check_reports = {
            'pdf_report': pdf_report_path,
            'word_report': word_report_path
        }
        
        add_log_message(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {check_result['correct_answers']} –∑ {check_result['total_questions']}", "SUCCESS")
        return True
        
    except Exception as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {str(e)}"
        st.session_state.last_error = error_msg
        add_log_message(error_msg, "ERROR")
        log.error(error_msg, exc_info=True)
        return False

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üìù TeacherTest - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è —É—á–Ω—ñ–≤")
    
    # –°–µ–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
    st.subheader("üìã –®–∞–±–ª–æ–Ω–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏")
    col1, col2 = st.columns([1, 1])
    
    with col1:
        try:
            temp_dir = ensure_temp_dir("templates_")
            test_template_path = generate_test_template(temp_dir)
            
            with open(test_template_path, 'rb') as file:
                st.download_button(
                     label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω —Ç–µ—Å—Ç—É",
                     data=file.read(),
                     file_name="–®–∞–±–ª–æ–Ω_—Ç–µ—Å—Ç—É.xlsx",
                     mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                     help="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤"
                 )
            add_log_message("–®–∞–±–ª–æ–Ω —Ç–µ—Å—Ç—É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—É —Ç–µ—Å—Ç—É: {e}")
            add_log_message(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É —Ç–µ—Å—Ç—É: {e}", "ERROR")
    
    with col2:
        try:
            temp_dir = ensure_temp_dir("templates_")
            query_doc_path = generate_neural_query_document(temp_dir)
            
            with open(query_doc_path, 'rb') as file:
                st.download_button(
                     label="ü§ñ –ó–∞–ø–∏—Ç –¥–ª—è –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ",
                     data=file.read(),
                     file_name="–ó–∞–ø–∏—Ç_–¥–ª—è_–Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ.docx",
                     mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                     help="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –∑–∞–ø–∏—Ç–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤ —á–µ—Ä–µ–∑ –®–Ü"
                 )
            add_log_message("–î–æ–∫—É–º–µ–Ω—Ç –∑ –∑–∞–ø–∏—Ç–æ–º –¥–ª—è –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            add_log_message(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}", "ERROR")
    
    st.info("üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞—à–∏—Ö —Ç–µ—Å—Ç—ñ–≤. –®–∞–±–ª–æ–Ω –º—ñ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–∞–ø–∏—Ç –¥–ª—è –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ, —â–æ–± —à–≤–∏–¥–∫–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ –®–Ü.")
     
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        
        # –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏
        st.session_state.mode = st.radio(
            "–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:",
            [1, 2],
            format_func=lambda x: "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤" if x == 1 else "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç",
            index=st.session_state.mode - 1
        )
        
        st.markdown("---")
        
        if st.session_state.mode == 1:
            st.subheader("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
            st.session_state.variants_count = st.number_input(
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:",
                min_value=1,
                max_value=100,
                value=st.session_state.variants_count
            )
            
            st.session_state.answer_format = st.selectbox(
                "–§–æ—Ä–º–∞—Ç –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:",
                options=['list', 'table'],
                format_func=lambda x: '–°–ø–∏—Å–æ–∫' if x == 'list' else '–¢–∞–±–ª–∏—Ü—è',
                index=0 if st.session_state.answer_format == 'list' else 1,
                help="–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: —Å–ø–∏—Å–æ–∫ –∞–±–æ —Ç–∞–±–ª–∏—Ü—è"
            )
            
            st.session_state.space_optimization = st.checkbox(
                "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º—ñ—Å—Ü—è",
                value=st.session_state.space_optimization,
                help="–ú—ñ–Ω—ñ–º—ñ–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ñ–≤ —Ä—è–¥–∫—ñ–≤ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è (–º–æ–∂–µ –ø–æ–≥—ñ—Ä—à–∏—Ç–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å)"
            )
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è
            st.subheader("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è")
            
            st.session_state.question_shuffle_mode = st.selectbox(
                "–ü–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å:",
                options=['full', 'easy_to_hard', 'none'],
                format_func=lambda x: {
                    'full': '–ü–æ–≤–Ω–µ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è',
                    'easy_to_hard': '–í—ñ–¥ –ª–µ–≥–∫–æ–≥–æ –¥–æ —Å–∫–ª–∞–¥–Ω–æ–≥–æ',
                    'none': '–ù–µ –ø–µ—Ä–µ–º—ñ—à—É–≤–∞—Ç–∏'
                }[x],
                index=['full', 'easy_to_hard', 'none'].index(st.session_state.question_shuffle_mode),
                help="–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± —É–ø–æ—Ä—è–¥–∫—É–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å —É —Ç–µ—Å—Ç—ñ"
            )
            
            st.session_state.answer_shuffle_mode = st.selectbox(
                "–ü–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:",
                options=['random', 'none'],
                format_func=lambda x: {
                    'random': '–í–∏–ø–∞–¥–∫–æ–≤–µ',
                    'none': '–ù—ñ'
                }[x],
                index=['random', 'none'].index(st.session_state.answer_shuffle_mode),
                help="–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞
            st.subheader("–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
            st.session_state.test_class = st.text_input(
                "–ö–ª–∞—Å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):",
                value=st.session_state.test_class,
                help="–í–∫–∞–∂—ñ—Ç—å –∫–ª–∞—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É —Ç–µ—Å—Ç—É"
            )
            
            st.session_state.test_date = st.text_input(
                "–î–∞—Ç–∞ —Ç–µ—Å—Ç—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):",
                value=st.session_state.test_date,
                help="–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —Ç–µ—Å—Ç—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É"
            )
        else:
            st.subheader("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
            st.session_state.variant_number = st.number_input(
                "–ù–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç–∞ —É—á–Ω—è:",
                min_value=1,
                max_value=100,
                value=st.session_state.variant_number
            )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if st.session_state.mode == 1:
        # –†–µ–∂–∏–º 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤
        st.header("üéØ –†–µ–∂–∏–º 1: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel –∞–±–æ Word —Ñ–∞–π–ª–∞ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏
        uploaded_file = st.file_uploader(
            "–û–±–µ—Ä—ñ—Ç—å Excel –∞–±–æ Word —Ñ–∞–π–ª –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏",
            type=["xlsx", "xls", "docx", "doc"],
            help="Excel —Ñ–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏: —Å—Ç–æ–≤–ø–µ—Ü—å –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏, —Å—Ç–æ–≤–ø–µ—Ü—å –∑ –Ω–æ–º–µ—Ä–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —Å—Ç–æ–≤–ø—Ü—ñ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. Word —Ñ–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: '1. –ü–∏—Ç–∞–Ω–Ω—è' –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π '1) –í–∞—Ä—ñ–∞–Ω—Ç'"
        )
        
        if uploaded_file is not None:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª —É —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É
            temp_dir = ensure_temp_dir()
            temp_file_path = os.path.join(temp_dir, uploaded_file.name)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ñ–∞–π–ª
            need_update = (
                not st.session_state.temp_file_path or 
                not os.path.exists(st.session_state.temp_file_path) or
                os.path.basename(st.session_state.temp_file_path) != uploaded_file.name or
                (os.path.exists(st.session_state.temp_file_path) and 
                 os.path.getsize(st.session_state.temp_file_path) != uploaded_file.size)
            )
            
            if need_update:
                with open(temp_file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                st.session_state.temp_file_path = temp_file_path
                load_file()
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ–∞–π–ª
            if st.session_state.df is not None:
                st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {uploaded_file.name}")
                st.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –ø–∏—Ç–∞–Ω—å: {len(st.session_state.df)}")
                
                # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                with st.expander("üëÄ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –¥–∞–Ω–∏—Ö"):
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º object —Å—Ç–æ–ª–±—Ü—ã –≤ —Å—Ç—Ä–æ–∫–∏
                    display_df = st.session_state.df.head(10).copy()
                    for col in display_df.select_dtypes(include=['object']).columns:
                        display_df[col] = display_df[col].astype(str)
                    st.dataframe(display_df, use_container_width=True)
                
                # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    if st.button("üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–∏", type="primary", use_container_width=True):
                        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤..."):
                            success = generate_tests()
                        
                        if success:
                            st.success("‚úÖ –¢–µ—Å—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")
                            st.rerun()
                    
                    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø—ñ–¥ –∫–Ω–æ–ø–∫–æ—é
                    if st.session_state.get('last_error'):
                        st.error(st.session_state.last_error)
            
            elif st.session_state.processing_error:
                st.error(f"‚ùå {st.session_state.processing_error}")
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        if st.session_state.output_files:
            st.markdown("---")
            st.header("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
            
            col1, col2, col3 = st.columns(3)
            
            # –¢–µ—Å—Ç—ã –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ (Word)
            with col1:
                if os.path.exists(st.session_state.output_files['test_word']):
                    with open(st.session_state.output_files['test_word'], "rb") as file:
                        st.download_button(
                            label="üìù –¢–µ—Å—Ç–∏ Word",
                            data=file,
                            file_name=os.path.basename(st.session_state.output_files['test_word']),
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                            use_container_width=True
                        )
            
            # Excel –∫–ª—é—á
            with col2:
                if os.path.exists(st.session_state.output_files['excel_key']):
                    with open(st.session_state.output_files['excel_key'], "rb") as file:
                        st.download_button(
                            label="üìä Excel –∫–ª—é—á",
                            data=file,
                            file_name=os.path.basename(st.session_state.output_files['excel_key']),
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True
                        )
            
            # –û—Ç–≤–µ—Ç—ã (Word)
            with col3:
                if os.path.exists(st.session_state.output_files['answers_word']):
                    with open(st.session_state.output_files['answers_word'], "rb") as file:
                        st.download_button(
                            label="üìã –í—ñ–¥–ø–æ–≤—ñ–¥—ñ Word",
                            data=file,
                            file_name=os.path.basename(st.session_state.output_files['answers_word']),
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                            use_container_width=True
                        )
    
    else:
        # –†–µ–∂–∏–º 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç
        st.header("‚úÖ –†–µ–∂–∏–º 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±—ñ—Ç")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª–∞-–∫–ª—é—á–∞
        answer_key_file = st.file_uploader(
            "–û–±–µ—Ä—ñ—Ç—å Excel —Ñ–∞–π–ª-–∫–ª—é—á",
            type=["xlsx", "xls"],
            help="–§–∞–π–ª-–∫–ª—é—á, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤"
        )
        
        if answer_key_file is not None:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª-–∫–ª—é—á
            temp_dir = ensure_temp_dir()
            key_file_path = os.path.join(temp_dir, answer_key_file.name)
            with open(key_file_path, "wb") as f:
                f.write(answer_key_file.getbuffer())
            st.session_state.answer_key_file = key_file_path
            st.success(f"‚úÖ –§–∞–π–ª-–∫–ª—é—á –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {answer_key_file.name}")
        
        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞
        if st.session_state.answer_key_file:
            st.subheader("üë§ –î–∞–Ω—ñ —É—á–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)")
            
            col1, col2 = st.columns(2)
            with col1:
                st.session_state.student_class = st.text_input(
                    "–ö–ª–∞—Å:",
                    value=st.session_state.student_class,
                    placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 10-–ê"
                )
            with col2:
                st.session_state.student_full_name = st.text_input(
                    "–ü–Ü–ë —É—á–Ω—è:",
                    value=st.session_state.student_full_name,
                    placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ"
                )
            
            st.markdown("---")
            
            # –í–≤–æ–¥ –æ—Ç–≤–µ—Ç–æ–≤ —É—á–µ–Ω–∏–∫–∞
            st.session_state.student_answers = st.text_input(
                "–í—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—á–Ω—è (—á–µ—Ä–µ–∑ –∫–æ–º—É):",
                value=st.session_state.student_answers,
                placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1,3,2,4,1,2",
                help="–î–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å: –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ –≤—ñ–¥ 1 –¥–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –î–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–∏—Ç–∞–Ω—å: –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –†–æ–∑–¥—ñ–ª—è–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ–º–∞–º–∏."
            )
            
            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                if st.button("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–æ–±–æ—Ç—É", type="primary", use_container_width=True):
                    if st.session_state.student_answers.strip():
                        with st.spinner("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π..."):
                            success = check_answers()
                        
                        if success:
                            st.success("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                            st.rerun()
                    else:
                        st.error("‚ùå –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—á–Ω—è")
                
                # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø—ñ–¥ –∫–Ω–æ–ø–∫–æ—é
                if st.session_state.get('last_error'):
                    st.error(st.session_state.last_error)
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if hasattr(st.session_state, 'check_result') and st.session_state.check_result:
            st.markdown("---")
            st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
            
            result = st.session_state.check_result
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4, col5 = st.columns(5)
            with col1:
                st.metric("–í–∞—Ä—ñ–∞–Ω—Ç", result['variant_number'])
            with col2:
                st.metric("–í—Å—å–æ–≥–æ –ø–∏—Ç–∞–Ω—å", result['total_questions'])
            with col3:
                st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π", result['correct_answers'])
            with col4:
                st.metric("–í—ñ–¥—Å–æ—Ç–æ–∫", f"{result['score_percentage']:.1f}%")
            with col5:
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–ª—ñ–≤ –ø–æ 12-–±–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ
                weighted_score = result.get('weighted_score', 0)
                max_score = result.get('max_score', result['total_questions'])
                if max_score > 0:
                    twelve_point_score = round((weighted_score / max_score) * 12, 1)
                else:
                    twelve_point_score = 0
                st.metric("–ë–∞–ª–∏ (12-–±–∞–ª—å–Ω–∞)", f"{twelve_point_score}")
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
            if hasattr(st.session_state, 'check_reports') and st.session_state.check_reports:
                st.markdown("---")
                st.subheader("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç–∏")
                
                col1, col2 = st.columns(2)
                
                # PDF –æ—Ç—á–µ—Ç
                with col1:
                    if os.path.exists(st.session_state.check_reports['pdf_report']):
                        with open(st.session_state.check_reports['pdf_report'], "rb") as file:
                            st.download_button(
                                label="üìÑ –ó–≤—ñ—Ç PDF",
                                data=file,
                                file_name=os.path.basename(st.session_state.check_reports['pdf_report']),
                                mime="application/pdf",
                                use_container_width=True
                            )
                
                # Word –æ—Ç—á–µ—Ç
                with col2:
                    if os.path.exists(st.session_state.check_reports['word_report']):
                        with open(st.session_state.check_reports['word_report'], "rb") as file:
                            st.download_button(
                                label="üìù –ó–≤—ñ—Ç Word",
                                data=file,
                                file_name=os.path.basename(st.session_state.check_reports['word_report']),
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                use_container_width=True
                            )
    
    # –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
    with st.expander("üìã –ñ—É—Ä–Ω–∞–ª –ø–æ–¥—ñ–π", expanded=False):
        if st.session_state.log_messages:
            for log_msg in st.session_state.log_messages[-20:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                if "ERROR" in log_msg:
                    st.error(log_msg)
                elif "SUCCESS" in log_msg:
                    st.success(log_msg)
                elif "WARNING" in log_msg:
                    st.warning(log_msg)
                else:
                    st.info(log_msg)
        else:
            st.info("–ñ—É—Ä–Ω–∞–ª –ø–æ—Ä–æ–∂–Ω—ñ–π")

if __name__ == "__main__":
    main()
