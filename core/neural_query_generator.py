from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.shared import OxmlElement, qn
import os
import logging

log = logging.getLogger(__name__)

def create_neural_query_document(output_path: str):
    """
    Создает документ Word с запросом для нейросети по генерации тестов.
    
    Args:
        output_path: Путь для сохранения документа
    """
    try:
        # Создаем новый документ
        doc = Document()
        
        # Заголовок
        title = doc.add_heading('Запрос для нейросети: Генерация тестов в Excel формате', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Введение
        intro = doc.add_paragraph()
        intro.add_run('Данный запрос поможет вам сгенерировать тест в правильном формате для системы TeacherTest.').bold = True
        
        doc.add_paragraph('Скопируйте текст ниже, замените [ТЕМА] и [УРОВЕНЬ СЛОЖНОСТИ] на ваши значения, и отправьте запрос нейросети:')
        
        # Основной запрос
        doc.add_heading('Запрос для нейросети:', level=1)
        
        query_text = """
Создай тест по теме "[ТЕМА]" уровня сложности "[УРОВЕНЬ СЛОЖНОСТИ]" в формате Excel таблицы.

Требования к формату:

1. СТРУКТУРА ТАБЛИЦЫ:
   - Первая строка: подробные инструкции по заполнению (не удалять!)
   - Вторая строка: заголовки колонок
   - Начиная с третьей строки: данные вопросов

2. КОЛОНКИ (обязательный порядок):
   A. Номер вопроса (1, 2, 3... или 1, 1, 1, 2, 2 для опциональных вариантов)
   B. Текст вопроса
   C. Правильный ответ (A, B, C, D для выбора или "открытый" для текстового ответа)
   D. Вес вопроса (1-5, где 1=легкий, 5=сложный)
   E. Вариант A
   F. Вариант B
   G. Вариант C
   H. Вариант D

3. ТИПЫ ВОПРОСОВ:
   - Вопросы с множественным выбором (4 варианта ответа A, B, C, D)
   - Открытые вопросы (колонки E-H остаются пустыми, в колонке C указать "открытый")

4. ОПЦИОНАЛЬНЫЕ ВОПРОСЫ:
   - Если нужны альтернативные варианты вопросов, используйте одинаковые номера
   - Например: 1, 1, 1, 2, 2, 3 - система выберет случайный вопрос из каждой группы

5. ИНСТРУКЦИИ В ПЕРВОЙ СТРОКЕ:
   Добавь в первую строку (объединенную A1:H1) следующий текст:
   "ИНСТРУКЦИЯ ПО ЗАПОЛНЕНИЮ ТЕСТА:
   1. Номер вопроса (колонка A): Укажите номер вопроса. Если несколько вопросов имеют одинаковый номер, система выберет случайный.
   2. Вопрос (колонка B): Текст вопроса.
   3. Правильный ответ/Тип (колонка C): Для вопросов с вариантами - буква (A, B, C, D). Для открытых - 'открытый'.
   4. Вес (колонка D): Сложность вопроса (1-легкий, 5-сложный).
   5. Варианты ответов (колонки E-H): Варианты A, B, C, D. Пустые для открытых вопросов.
   ВАЖНО: Заполнение начинается со строки 2!"

6. ЗАГОЛОВКИ ВТОРОЙ СТРОКИ:
   A2: "Номер вопроса"
   B2: "Вопрос"
   C2: "Правильный ответ/Тип"
   D2: "Вес"
   E2: "Вариант A"
   F2: "Вариант B"
   G2: "Вариант C"
   H2: "Вариант D"

Пример данных (начиная с строки 3):
1 | Какой язык используется для веб-разработки? | A | 2 | JavaScript | Python | C++ | Java
1 | Что такое HTML? | B | 1 | Язык программирования | Язык разметки | База данных | ОС
2 | Объясните принцип HTTP | открытый | 4 | | | |
3 | Сколько будет 2+2? | C | 1 | 3 | 5 | 4 | 6

Создай [КОЛИЧЕСТВО ВОПРОСОВ] вопросов по теме "[ТЕМА]" с уровнем сложности "[УРОВЕНЬ СЛОЖНОСТИ]".
Включи разные типы вопросов: с выбором ответа и открытые.
Распредели веса от 1 до 5 в зависимости от сложности каждого конкретного вопроса.
"""
        
        # Добавляем запрос в документ
        query_paragraph = doc.add_paragraph(query_text)
        query_paragraph.style = 'Normal'
        
        # Раздел с примечаниями
        doc.add_heading('Важные примечания:', level=1)
        
        notes = [
            "Замените [ТЕМА] на конкретную тему вашего теста (например: 'Основы программирования', 'История Украины', 'Математика 8 класс')",
            "Замените [УРОВЕНЬ СЛОЖНОСТИ] на желаемый уровень (например: 'начальный', 'средний', 'продвинутый', 'для 8 класса')",
            "Замените [КОЛИЧЕСТВО ВОПРОСОВ] на нужное количество (например: '10', '15', '20')",
            "Нейросеть создаст таблицу в текстовом формате - скопируйте её в Excel",
            "Убедитесь, что первая строка содержит инструкции, а данные начинаются со второй строки",
            "Для создания опциональных вопросов попросите нейросеть создать несколько вариантов с одинаковыми номерами"
        ]
        
        for note in notes:
            p = doc.add_paragraph()
            p.add_run('• ').bold = True
            p.add_run(note)
        
        # Раздел с примером готового запроса
        doc.add_heading('Пример готового запроса:', level=1)
        
        example_query = """
Создай тест по теме "Основы веб-разработки" уровня сложности "средний" в формате Excel таблицы.

[... весь текст запроса выше ...]

Создай 15 вопросов по теме "Основы веб-разработки" с уровнем сложности "средний".
Включи разные типы вопросов: с выбором ответа и открытые.
Распредели веса от 1 до 5 в зависимости от сложности каждого конкретного вопроса.
"""
        
        example_paragraph = doc.add_paragraph(example_query)
        example_paragraph.style = 'Normal'
        
        # Финальные рекомендации
        doc.add_heading('Рекомендации по использованию:', level=1)
        
        recommendations = [
            "Используйте этот запрос с ChatGPT, Claude, Gemini или другими нейросетями",
            "После получения ответа скопируйте таблицу в Excel и сохраните файл",
            "Загрузите созданный файл в систему TeacherTest для генерации вариантов",
            "Проверьте правильность форматирования перед использованием",
            "При необходимости отредактируйте вопросы и ответы вручную"
        ]
        
        for rec in recommendations:
            p = doc.add_paragraph()
            p.add_run('✓ ').bold = True
            p.add_run(rec)
        
        # Создаем директорию если не существует
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        # Сохраняем документ
        doc.save(output_path)
        log.info(f"Документ с запросом для нейросети создан: {output_path}")
        
    except Exception as e:
        log.error(f"Ошибка при создании документа с запросом: {e}")
        raise